# common ------------------------------------------------------------------------
function sp_f_ssh_init() {
  local _p_host="${sp_p_hosts}/${_host}"

  if ! test -r "${_p_host}" ; then
    sp_f_err "file ${_p_host} not found"
    exit 1
  fi

  # read info file
  . "${_p_host}"
} # end sp_f_ssh_init


# login -------------------------------------------------------------------------
function sp_f_sshlogin() {
  local _host="${1:-default}"
  local _force="${2:-false}"

  sp_f_ssh_init "${_host}"

  # lock --------------------------------
  local _lck="${_host}.${sp_g_bn}"
  if ${_force} ; then
    sp_f_lck_delete "${_lck}"
  fi

  # proxy -------------------------------
  local _proxy=false
  local _opts="${sp_g_ssh_opts}"
  if ! test -z "${sp_g_ssh_proxy}" ; then
    if sp_f_lck_create "${_lck}" ; then
      _proxy=true
      _opts="${_opts} ${sp_g_ssh_proxy}"
    else
      sp_f_warn "active proxies: ${sp_g_ssh_proxy}"
    fi
  fi

  # ssh key -----------------------------
  local _p_key="${sp_p_keys}/${_host}${sp_g_key_ext}"
  if test -r "${_p_key}" ; then
    _opts="${_opts} -i ${_p_key}"
  else
    sp_f_warn "key ${_p_key} not found"
  fi

  local _url="${sp_g_ssh_user}@${sp_g_ssh_fqdn}"
  sp_f_stt "Login to ${_url}"

  # ssh ---------------------------------
  ${sp_p_ssh} ${_opts} ${_url}
  local _r=$?
  if ${_proxy} ; then
    sp_f_lck_delete "${_lck}"
  fi
  return ${_r}
} # end sp_f_sshlogin



function sp_f_sshxfer() {
  local _host="${1:-default}"
  local _m="${2:-1}"
  local _src="${3}"

  # mode select -------------------------
  local _push=true
  local _mode=$((_m%10))
  if test $((_m/10)) -gt 0 ; then
    _push=false
  fi

  # init --------------------------------
  sp_f_ssh_init "${_host}"

  local _dst="${sp_p_scp_local}"
  local _src_url="${sp_g_ssh_user}@${sp_g_ssh_fqdn}:${sp_p_scp_remote}"
  if ${_push} ; then
    if ! test -r "${_src}" ; then
      sp_f_err "source ${_src} not found"
      return 2
    fi
  else
    local _src_url="${_src_url}/${_src}"
    sp_f_dir_create "${sp_p_scp_local}"
  fi

  # mode --------------------------------
  case ${_mode} in
    1)
      local _opts="${sp_g_scp_opts}"
      local _url="${_src_url}"
      local _mtxt="scp"
    ;;
    2)
      local _opts="-p ${sp_g_ssh_port}"
      local _url="${sp_g_ssh_user}@${sp_g_ssh_fqdn}"
      local _mtxt="tar/ssh"
    ;;
    3)
      local _opts="-p ${sp_g_ssh_port}"
      local _url="${_src_url}"
      local _mtxt="rsync/ssh"
    ;;
    *) sp_f_err "invalid mode"
       return 3
    ;;
  esac

  # ssh key -----------------------------
  local _p_key="${sp_p_keys}/${_host}${sp_g_key_ext}"
  if test -r "${_p_key}" ; then
    _opts="${_opts} -i ${_p_key}"
  else
    sp_f_warn "key ${_p_key} not found"
  fi

  # title -------------------------------
  local _dtxt="\n From: ${_src}\n   To: ${_url}"
  if ! ${_push} ; then
    _dtxt="\n From: ${_url}\n   To: ${_dst}"
  fi
  sp_f_stt "Transfer (${_mtxt}) ${_dtxt}"

  sp_f_yesno "Start?"
  if test $? -gt 0 ; then return $?; fi

  # transfer ----------------------------
  case ${_mode} in
    1)
      if ${_push} ; then
        ${sp_p_scp} ${_opts} "${_src}" ${_url}
      else
        ${sp_p_scp} ${_opts} ${_url} "${_dst}"
      fi
    ;;
    2)
      if ${_push} ; then
        ${sp_p_tar} cvf - "${_src}" | ${sp_p_ssh} ${_opts} ${_url} "(cd \"${sp_p_scp_remote}\";tar xvf -)"
      else
        ${sp_p_ssh} ${_opts} ${_url} "(cd \"${sp_p_scp_remote}\";tar cvf - \"${_src}\")" | (cd "${_dst}"; ${sp_p_tar} xvf -)
      fi
    ;;
    3)
      if ${_push} ; then
        ${sp_p_rsync} -a -z -v --partial --progress -e "${sp_p_ssh} ${_opts}" "${_src}" ${_url}
      else
        ${sp_p_rsync} -a -z -v --partial --progress -e "${sp_p_ssh} ${_opts}" ${_url} "${_dst}"
      fi
    ;;
  esac

  return $?
} # end sp_f_sshxfer


function sp_f_sshpush() {
  local _h="${1:-default}"
  local _m="${2:-1}"
  local _s="${3}"
  _m=$((_m%10))
  sp_f_sshxfer "${_h}" ${_m} "${_s}"
}

function sp_f_sshpull() {
  local _h="${1:-default}"
  local _m="${2:-1}"
  local _s="${3}"
  _m=$((_m%10+10))
  sp_f_sshxfer "${_h}" ${_m} "${_s}"
}









# scp ---------------------------------------------------------------------------
function _sp_f_sshpush() {
  local _host="${1:-default}"
  local _mode="${2:-1}"
  local _src="${3}"

  sp_f_ssh_init "${_host}"

  if ! test -r "${_src}" ; then
    sp_f_err "source ${_src} not found"
    return 2
  fi

  # mode --------------------------------
  case ${_mode} in
    1)
      local _opts="${sp_g_scp_opts}"
      local _url="${sp_g_ssh_user}@${sp_g_ssh_fqdn}:${sp_p_scp_remote}"
      local _mtxt="scp"
    ;;
    2)
      local _opts="-p ${sp_g_ssh_port}"
      local _url="${sp_g_ssh_user}@${sp_g_ssh_fqdn}"
      local _mtxt="tar/ssh"
    ;;
    3)
      local _opts="-p ${sp_g_ssh_port}"
      local _url="${sp_g_ssh_user}@${sp_g_ssh_fqdn}:${sp_p_scp_remote}"
      local _mtxt="rsync/ssh"
    ;;
    *) sp_f_err "invalid mode"
       return 3
    ;;
  esac

  # ssh key -----------------------------
  local _p_key="${sp_p_keys}/${_host}${sp_g_key_ext}"
  if test -r "${_p_key}" ; then
    _opts="${_opts} -i ${_p_key}"
  else
    sp_f_warn "key ${_p_key} not found"
  fi

  sp_f_stt "Copying (${_mtxt}) ${_src} to ${_url}"

  sp_f_yesno "Start xfer?"
  if test $? -gt 0 ; then return $?; fi

  # transfer ----------------------------
  case ${_mode} in
    1)
      ${sp_p_scp} ${_opts} "${_src}" ${_url}
    ;;
    2)
      ${sp_p_tar} cvf - "${_src}" | ${sp_p_ssh} ${_opts} ${_url} "(cd \"${sp_p_scp_remote}\";tar xvf -)"
    ;;
    3)
      ${sp_p_rsync} -a -z -v --partial --progress -e "${sp_p_ssh} ${_opts}" "${_src}" ${_url}
    ;;
  esac

  return $?
} # end sp_f_sshpush


function _sp_f_sshpull() {
  local _host="${1:-default}"
  local _mode="${2:-1}"
  local _src="${3}"

  sp_f_ssh_init "${_host}"

  local _dst="${sp_p_scp_local}"
  local _src_url="${sp_g_ssh_user}@${sp_g_ssh_fqdn}:${sp_p_scp_remote}/${_src}"

  sp_f_dir_create "${sp_p_scp_local}"

  # mode --------------------------------
  case ${_mode} in
    1)
      local _opts="${sp_g_scp_opts}"
      local _url="${_src_url}"
      local _mtxt="scp"
    ;;
    2)
      local _opts="-p ${sp_g_ssh_port}"
      local _url="${sp_g_ssh_user}@${sp_g_ssh_fqdn}"
      local _mtxt="tar/ssh"
    ;;
    3)
      local _opts="-p ${sp_g_ssh_port}"
      local _url="${_src_url}"
      local _mtxt="rsync/ssh"
    ;;
    *) sp_f_err "invalid mode"
       return 3
    ;;
  esac

  # ssh key -----------------------------
  local _p_key="${sp_p_keys}/${_host}${sp_g_key_ext}"
  if test -r "${_p_key}" ; then
    _opts="${_opts} -i ${_p_key}"
  else
    sp_f_warn "key ${_p_key} not found"
  fi

  sp_f_stt "Copying (${_mtxt}) ${_src_url} to ${_dst}"

  sp_f_yesno "Start xfer?"
  if test $? -gt 0 ; then return $?; fi

  # transfer ----------------------------
  case ${_mode} in
    1)
      ${sp_p_scp} ${_opts} ${_url} "${_dst}"
    ;;
    2)
      ${sp_p_ssh} ${_opts} ${_url} "(cd \"${sp_p_scp_remote}\";tar cvf - \"${_src}\")" | (cd "${_dst}"; ${sp_p_tar} xvf -)
    ;;
    3)
      ${sp_p_rsync} -a -z -v --partial --progress -e "${sp_p_ssh} ${_opts}" ${_url} "${_dst}"
    ;;
  esac

  return $?
} # end sp_f_sshpull



function __SP_sshpop() {
  local name=""
  name=$(basename ${0})
  local host="${1:-default}"
  local host_info="${shellpack_hosts}/${host}"

  if ! test -r "${host_info}" ; then
    errmsg "config for ${host} in ${shellpack_hosts} not found"
    return 1
  fi

  . ${host_info}

  local file="${2}"

  local scp_opt="${SCP_OPT}"
  local host_key="${shellpack_keys}/${host}.${shellpack_sshkeyext}"
  if test -r "${host_key}" ; then
    scp_opt="${scp_opt} -i ${host_key}"
  fi

  local user=${SSH_USER:-${USER}}
  local pop_def="/home/${user}"
  local pop_dir=${SCP_REMOTE:-${pop_def}}

  local pop_local_def="${HOME}"
  local pop_local=${SCP_LOCAL:-${pop_local_def}}

  if ! test -d ${pop_local} ; then
    mkdir -p ${pop_local}
  fi

  echo "Copying ${user}@${FQDN}:${pop_dir}/${file} to ${pop_local}"
  ${scp_bin} ${scp_opt} ${user}@${FQDN}:${pop_dir}/${file} ${pop_local}
  return $?
} # end __SP_sshpop


# mount -------------------------------------------------------------------------
function __SP_sshmount() {
  local name=""
  name=$(basename ${0})
  local host="${1:-default}"
  local host_info="${shellpack_hosts}/${host}"

  if ! test -r "${host_info}" ; then
    errmsg "config for ${host} in ${shellpack_hosts} not found"
    return 1
  fi

  . ${host_info}

  local sshfs_opt="${SSHFS_OPT}"
  local host_key="${shellpack_keys}/${host}.${shellpack_sshkeyext}"
  if test -r "${host_key}" ; then
    sshfs_opt="${sshfs_opt} -o IdentityFile=${host_key}"
  fi

  local sshfs_local_def="${HOME}/remote/${host}"
  local sshfs_local=${SSHFS_LOCAL:-${sshfs_local_def}}

  local user=${SSH_USER:-${USER}}

  local sshfs_remote_def="/home/${user}"
  local sshfs_remote=${SSHFS_REMOTE:-${sshfs_remote_def}}

  create_directory "${sshfs_local}"

  echo "Mounting ${user}@${FQDN}:${sshfs_remote} to ${sshfs_local}"
  ${sshfs_bin} ${user}@${FQDN}:${sshfs_remote} ${sshfs_local} ${sshfs_opt}
  return $?
} # end __SP_sshmount


function __SP_sshumount() {
  local name=""
  name=$(basename ${0})
  local host="${1:-default}"
  local host_info="${shellpack_hosts}/${host}"

  if ! test -r "${host_info}" ; then
    errmsg "config for ${host} in ${shellpack_hosts} not found"
    return 1
  fi

  . ${host_info}

  local sshfs_local_def="${HOME}/remote/${host}"
  local sshfs_local=${SSHFS_LOCAL:-${sshfs_local_def}}

  ${fusermnt_bin} ${fusermnt_opts} ${sshfs_local}
  return $?
} # end __SP_sshumount


# ssh misc ----------------------------------------------------------------------
function __SP_sshkeygen() {
  local name=""
  name=$(basename ${0})
  local host="${1:-default}"
  local force="${2:-0}"

  cd ${shellpack_keys}
  local key=${host}.id_rsa
  local lnkey=${host}.${shellpack_sshkeyext}

  ${keygen_bin} -b 2048 -t rsa -f ${key}
  local ret=$?

  if test ${ret} -eq 0 ; then
    chmod go-rwx ${key}
    chmod go-rwx ${key}.pub
    create_symlink "${key}" "${lnkey}"
  else
    return ${ret}
  fi
} # end __SP_sshkeygen


function __SP_sshinfo() {
  local name=""
  name=$(basename ${0})
  local host="${1:-default}"
  local host_info="${shellpack_hosts}/${host}"

  if ! test -r "${host_info}" ; then
    errmsg "config for ${host} in ${shellpack_hosts} not found"
    return 1
  fi

  . ${host_info}
  echo
  echo "MID: ${MID}"
  echo "--------------------------------------------------------------------------------"
  echo "SSH Login  : ${SSH_USER}@${FQDN}"
  echo "SSH Options: ${SSH_OPT}"
  echo "SSH Proxy  : ${SSH_PROXY}"
  echo
  echo "SCP Remote : ${SCP_REMOTE}"
  echo "SCP Local  : ${SCP_LOCAL}"
  echo
  echo "SSHFS Mount  : ${SSH_USER}@${FQDN}:${SSHFS_REMOTE} -> ${SSHFS_LOCAL}"
  echo "SSHFS Options: ${SSHFS_OPT}"
  echo
}
